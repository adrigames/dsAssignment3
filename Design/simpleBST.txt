simpleNode = register
  label = integer
  times = integer
  leftChild = ^simpleNode
  rightChild = ^simpleNode
endregister

class simpleBST
  private root: ^simpleNode
  private integer[] deleteMin(n:^simpleNode)
  public void insert(l: integer, n: ^simpleNode)
  public void delete(l: integer, n: ^simpleNode)
  public boolean search(l: integer, n: ^simpleNode)
  public string list()
endclass

public void simpleBST::insert(l: integer, n: ^simpleNode)
	if n = null then
		allocate(n)
		n^.label := l
		n^.leftChild := null
		n^.rightChild := null
		n^.times := 1
	else if l<n^.label then
		insert(l, n^.leftChild)
	else if l>n^.label then
		insert(l, n^.rightChild)
	else if n^.label = l then
		n^.times := n^.times + 1
	return
endmethod

private integer[] simpleBST::deleteMin(n: ^simpleNode)
	aux: integer[]
	if n^.leftChild = null then
		aux[1] := n^.label
		aux[2] := n^.times
		n := n^.rightChild
		return aux
	else
		return deleteMin(n^.leftChild)
	endif
endmethod

public void simpleBST::delete(l: integer, n: ^simpleNode)
	aux: integer[]
	if n != null then
		if l < n^.label then
			delete(l, n^.leftChild)
		else if l>n^.label then
			delete(l, n^.rightChild)
		else
			n^.times := n^.times -1
			if n^.leftChild = null and n^.rightChild = null then
				if n^.times <= 0 then
					dispose(n)
				endif
			else if n^.leftChild = null then
				if n^.times <= 0 then
					n :=  n^.rightChild
				endif
			else if n^.rightChild = null then
				if n^.times <= 0 then
					n := n^.leftChild
				endif
			else
				if n^.times <= 0 then
					aux := deleteMin(n^.rightChild)
					n^.element := aux[1]
					n^.times := aux[2]
				endif
		endif
endmethod

public boolean simpleBST::search(l: integer, n: ^simpleNode) 
	if n = null then return false
	else if n^.label = l then return true
	else if l<n^.element then
		return search(l, n^.leftChild)
	else if l>n^.element then
		return search(l, n^.rightChild)
endMethod

public string simpleBST::list(n:^simpleNode)
	neg: boolean
	neg := n^.label < 0
	if n^.leftChild = null and n^.rightChild = null then
		if neg then
			return string("-"+n^.value+", "+n^.times+" times; ")
		else
			return string("+"+n^.value+", "+n^.times+" times; ")
		endif
	else if n^.rightchild = null then
		str: string
		str = list(n^.leftchild)
		if neg then
			return str + string("-"+n^.value+", "+n^.times+" times;")
		else
			return str + string("-"+n^.value+", "+n^.times+" times;")
	else
		str: string
		str = list(n^.leftchild)
		if neg then
			return str + string("-"+n^.value+,", "+n^.times+" times;") + list(n^.rightchild)