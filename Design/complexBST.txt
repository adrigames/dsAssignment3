complexNode = register
  label = integer
  posTimes = integer
  negTimes = integer
  leftChild = ^complexNode
  rightChild = ^complexNode
endregister

class simpleBST
  private root: ^complexNode
  private integer[] deleteMin(n:^complexNode)
  public void insert(l: integer, n: ^complexNode)
  public void delete(l: integer, n: ^complexNode)
  public boolean search(l: integer, n: ^complexNode)
  public string list()
endclass

public void simpleBST::insert(l: integer, n: ^complexNode)
	neg: boolean
	aux: int
	if l<0 then
		neg := true
		aux := -l
	else 
		neg := false
		aux := l
	endif

	if n = null then
		allocate(n)
		n^.label := aux
		n^.leftChild := null
		n^.rightChild := null
		if neg then
			n^.negTimes := 1
		else
			n^.posTimes := 1
	else if aux<n^.element then
		insert(l, n^.leftChild)
	else if aux>n^.element then
		insert(l, n^.rightChild)
	else if n^.label = aux then
		if neg
			n^.negTimes := n^.negTimes + 1
		else
			n^.posTimes := n^.posTimes + 1
	return
endmethod

private integer[] simpleBST::deleteMin(n: ^complexNode)
	aux: integer[]
	if n^.leftChild = null then
		aux[1] := n^.label
		aux[2] := n^.posTimes
		aux[3] := n^.negTimes
		n := n^.rightChild
		return aux
	else
		return deleteMin(n^.leftChild)
	endif
endmethod

public void simpleBST::delete(l: integer, n: ^complexNode)
	neg: boolean
	aux: integer
	aux2: integer[]
	if l<0 then
		aux := -l
		neg := true
	else
		aux := l
		aux := false
	if n != null then
		if l < n^.label then
			delete(l, n^.leftChild)
		else if l>n^.label then
			delete(l, n^.rightChild)
		else
			if neg then
				n^.negTimes := negTimes - 1
			else
				n^.posTimes := n^.posTimes - 1
			if n^.negTimes = 0 and n^.posTimes = 0 then
				if n^.leftChild = null and n^.rightChild = null then
					dispose(n)
					endif
				else if n^.leftChild = null then
					n :=  n^.rightChild
				else if n^.rightChild = null then
					n := n^.leftChild
				else
					aux2 := deleteMin(n^.rightChild)
					n^.label := aux[1]
					n^.posTimes := aux[2]
					n^.negTimes := aux[3]
				endif
			endif
endmethod

public boolean simpleBST::search(l: integer, n: ^simpleNode) 
	if l < 0 then
		l := -l
	if n = null then return false
	else if n^.label = l then return true
	else if l<n^.element then
		return search(l, n^.leftChild)
	else if l>n^.element then
		return search(l, n^.rightChild)
endMethod